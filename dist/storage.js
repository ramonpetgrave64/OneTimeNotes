"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemory = void 0;
const crypto_1 = __importDefault(require("crypto"));
class InMemory {
    constructor(props = null) {
        if (props) {
            this.key = InMemory.decode(props.key);
            this.iv = props.iv;
            this.notes = props.notes;
        }
        else {
            this.key = InMemory.generateKey();
            this.iv = InMemory.generateIv();
            this.notes = {};
        }
    }
    static encode(input) {
        return Buffer.from(input, InMemory.external_encoding).toString(InMemory.internal_encoding);
    }
    static decode(output) {
        return Buffer.from(output, InMemory.internal_encoding).toString(InMemory.external_encoding);
    }
    static encrypt(text, key, iv) {
        const cipher = crypto_1.default.createCipheriv(InMemory.algorithm, Buffer.from(key, InMemory.internal_encoding), Buffer.from(iv, InMemory.internal_encoding));
        const ciphertext = cipher.update(text, InMemory.external_encoding, InMemory.internal_encoding) + cipher.final(InMemory.internal_encoding);
        return ciphertext;
    }
    static decrypt(text, key, iv) {
        const decipher = crypto_1.default.createDecipheriv(InMemory.algorithm, Buffer.from(key, InMemory.internal_encoding), Buffer.from(iv, InMemory.internal_encoding));
        const plaintext = decipher.update(text, InMemory.internal_encoding, InMemory.external_encoding); // + decipher.final(InMemory.external_encoding); // works with cbc, but not gcm?
        return plaintext;
    }
    storeNote(note) {
        const material = {
            key: InMemory.generateKey(),
            iv: InMemory.generateIv()
        };
        const ciphertext = InMemory.encrypt(note, material.key, material.iv);
        this.notes[material.iv] = ciphertext;
        const link = InMemory.encode(InMemory.encrypt(JSON.stringify(material), this.key, this.iv));
        return link;
    }
    retrieveNote(link) {
        var material;
        try {
            material = JSON.parse(InMemory.decrypt(InMemory.decode(link), this.key, this.iv));
        }
        catch (e) {
            throw new Error(`Unable to decrypt link ${link}`);
        }
        if (material.iv in this.notes) {
            const ciphertext = this.notes[material.iv];
            const note = InMemory.decrypt(ciphertext, material.key, material.iv);
            delete this.notes[material.iv];
            return note;
        }
        else {
            throw new Error(`No note for link ${link}`);
        }
        ;
    }
    static generateKey(bytes = 32) {
        return InMemory.encode(this.generateRandomBytes(bytes));
    }
    static generateIv(bytes = 16) {
        return InMemory.encode(this.generateRandomBytes(bytes));
    }
    static generateRandomBytes(bytes) {
        return crypto_1.default.randomBytes(bytes);
    }
}
exports.InMemory = InMemory;
InMemory.internal_encoding = 'base64';
InMemory.external_encoding = 'utf8';
InMemory.algorithm = 'aes-256-gcm';
//# sourceMappingURL=data:application/json;base64,