"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const console_1 = require("console");
const path_1 = __importDefault(require("path"));
const storage_1 = require("./storage");
// configuration
const storage = new storage_1.InMemory();
const port = 3000;
// server
const app = express_1.default();
app.set('view engine', 'pug')
    .set('views', path_1.default.join(__dirname, 'views'))
    .use("/css", express_1.default.static(path_1.default.join(__dirname, "../node_modules/bootstrap/dist/css")))
    .listen(port, () => {
    console.log(`OneTimeNotes listening on port ${port}!`);
});
// api
app.post('/api/note', express_1.default.urlencoded({ extended: false }), (req, res) => {
    const link = handlePostNote(req);
    res.send(link);
});
app.get('/api/note/:link', (req, res) => {
    try {
        const note = handleGetNote(req);
        res.send(note);
    }
    catch (e) {
        res.status(500).send(e.message);
    }
});
// pages
app.get('/', (req, res) => {
    res.render('index');
});
app.post('/note', express_1.default.urlencoded({ extended: false }), (req, res) => {
    const link = handlePostNote(req);
    res.render('link', { link: link });
});
app.get('/note/:link', (req, res) => {
    try {
        const note = handleGetNote(req);
        res.render('note', { note: note });
    }
    catch (e) {
        res.status(500).render('note-error', { message: e.message });
    }
});
// handlers
function handlePostNote(req) {
    const note = req.body.note;
    const noteId = storage.storeNote(note);
    const link = `${req.protocol}://${req.hostname}:${port}/note/${noteId}`;
    return link;
}
function handleGetNote(req) {
    const link = req.params.link;
    try {
        const note = storage.retrieveNote(link);
        return note;
    }
    catch (e) {
        console.error(e.message);
        throw new Error('Error: Unable to retrieve note');
    }
    ;
}
// test
function test() {
    const text = 'my test note';
    const backend = new storage_1.InMemory();
    const link = backend.storeNote(text);
    const note = backend.retrieveNote(link);
    console_1.assert(note == text);
    console.log('test passes');
}
test();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUE4QjtBQUM5QixxQ0FBaUM7QUFDakMsZ0RBQXdCO0FBRXhCLHVDQUFvQztBQUVwQyxnQkFBZ0I7QUFDaEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxrQkFBUSxFQUFFLENBQUM7QUFDL0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBRWxCLFNBQVM7QUFDVCxNQUFNLEdBQUcsR0FBRyxpQkFBTyxFQUFFLENBQUM7QUFDdEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDO0tBQzFCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDM0MsR0FBRyxDQUFDLE1BQU0sRUFBRSxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDLENBQUM7S0FDdkYsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUU7SUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsSUFBSSxHQUFHLENBQUMsQ0FBQTtBQUN4RCxDQUFDLENBQUMsQ0FBQTtBQUVKLE1BQU07QUFDTixHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQzFFLE1BQU0sSUFBSSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pCLENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEdBQUcsRUFB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QUMsQ0FBQztJQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBQzVCLENBQUM7QUFFRCxJQUFJLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnY29uc29sZSc7XG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5pbXBvcnQgeyBJbk1lbW9yeSB9IGZyb20gJy4vc3RvcmFnZSdcblxuLy8gY29uZmlndXJhdGlvblxuY29uc3Qgc3RvcmFnZSA9IG5ldyBJbk1lbW9yeSgpO1xuY29uc3QgcG9ydCA9IDMwMDA7XG5cbi8vIHNlcnZlclxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuYXBwLnNldCgndmlldyBlbmdpbmUnLCAncHVnJylcbiAgLnNldCgndmlld3MnLCBwYXRoLmpvaW4oX19kaXJuYW1lLCAndmlld3MnKSlcbiAgLnVzZShcIi9jc3NcIiwgZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL2Rpc3QvY3NzXCIpKSlcbiAgLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coYE9uZVRpbWVOb3RlcyBsaXN0ZW5pbmcgb24gcG9ydCAke3BvcnR9IWApXG4gIH0pXG5cbi8vIGFwaVxuYXBwLnBvc3QoJy9hcGkvbm90ZScsIGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSwgKHJlcSwgcmVzKSA9PiB7XG4gIGNvbnN0IGxpbmsgPSBoYW5kbGVQb3N0Tm90ZShyZXEpO1xuICByZXMuc2VuZChsaW5rKTtcbn0pO1xuXG5hcHAuZ2V0KCcvYXBpL25vdGUvOmxpbmsnLCAocmVxLCByZXMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBub3RlID0gaGFuZGxlR2V0Tm90ZShyZXEpO1xuICAgIHJlcy5zZW5kKG5vdGUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmVzLnN0YXR1cyg1MDApLnNlbmQoZS5tZXNzYWdlKTtcbiAgfVxufSk7XG5cbi8vIHBhZ2VzXG5hcHAuZ2V0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5yZW5kZXIoJ2luZGV4Jylcbn0pO1xuXG5hcHAucG9zdCgnL25vdGUnLCBleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSksIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCBsaW5rID0gaGFuZGxlUG9zdE5vdGUocmVxKTtcbiAgcmVzLnJlbmRlcignbGluaycsIHsgbGluazogbGluayB9KTtcbn0pO1xuXG5hcHAuZ2V0KCcvbm90ZS86bGluaycsIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IG5vdGUgPSBoYW5kbGVHZXROb3RlKHJlcSk7XG4gICAgcmVzLnJlbmRlcignbm90ZScsIHsgbm90ZTogbm90ZSB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlcy5zdGF0dXMoNTAwKS5yZW5kZXIoJ25vdGUtZXJyb3InLCB7IG1lc3NhZ2U6IGUubWVzc2FnZSB9KTtcbiAgfVxufSk7XG5cbi8vIGhhbmRsZXJzXG5mdW5jdGlvbiBoYW5kbGVQb3N0Tm90ZShyZXE6IGFueSk6IHN0cmluZyB7XG4gIGNvbnN0IG5vdGUgPSByZXEuYm9keS5ub3RlO1xuICBjb25zdCBub3RlSWQgPSBzdG9yYWdlLnN0b3JlTm90ZShub3RlKTtcbiAgY29uc3QgbGluayA9IGAke3JlcS5wcm90b2NvbH06Ly8ke3JlcS5ob3N0bmFtZX06JHtwb3J0fS9ub3RlLyR7bm90ZUlkfWA7XG4gIHJldHVybiBsaW5rXG59XG5cbmZ1bmN0aW9uIGhhbmRsZUdldE5vdGUocmVxOiBhbnkpIHtcbiAgY29uc3QgbGluayA9IHJlcS5wYXJhbXMubGluaztcbiAgdHJ5IHtcbiAgICBjb25zdCBub3RlID0gc3RvcmFnZS5yZXRyaWV2ZU5vdGUobGluayk7XG4gICAgcmV0dXJuIG5vdGVcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yOiBVbmFibGUgdG8gcmV0cmlldmUgbm90ZScpO1xuICB9O1xufVxuXG4vLyB0ZXN0XG5mdW5jdGlvbiB0ZXN0KCkge1xuICBjb25zdCB0ZXh0ID0gJ215IHRlc3Qgbm90ZSc7XG4gIGNvbnN0IGJhY2tlbmQgPSBuZXcgSW5NZW1vcnkoKTtcbiAgY29uc3QgbGluayA9IGJhY2tlbmQuc3RvcmVOb3RlKHRleHQpO1xuICBjb25zdCBub3RlID0gYmFja2VuZC5yZXRyaWV2ZU5vdGUobGluayk7XG4gIGFzc2VydChub3RlID09IHRleHQpO1xuICBjb25zb2xlLmxvZygndGVzdCBwYXNzZXMnKVxufVxuXG50ZXN0KCk7Il19